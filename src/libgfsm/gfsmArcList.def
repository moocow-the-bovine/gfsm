
/*=============================================================================*\
 * File: gfsmArclist.def
 * Author: Bryan Jurish <moocow@ling.uni-potsdam.de>
 * Description: finite state machine library: arc lists: inline definitions
 *
 * Copyright (c) 2004-2007 Bryan Jurish.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *=============================================================================*/

#include <stdlib.h>

/*======================================================================
 * Methods: Arc lists
 */

/*--------------------------------------------------------------
 * arclist_prepend()
 */
static inline
gfsmArcList *gfsm_arclist_prepend(gfsmArcList *al, gfsmArc *a)
{ return g_slist_prepend(al,arc); }

/*--------------------------------------------------------------
 * arclist_new_full()
 */
static inline
gfsmArcList *gfsm_arclist_new_full(gfsmStateId  src,
				   gfsmStateId  dst,
				   gfsmLabelVal lo,
				   gfsmLabelVal hi,
				   gfsmWeight   wt,
				   gfsmArcList  *nxt)
{
  return gfsm_arclist_prepend(nxt,gfsm_arc_new_full(src,dst,lo,hi,wt));
}

/*--------------------------------------------------------------
 * arclist_insert()
 */
static inline
gfsmArcList *gfsm_arclist_insert(gfsmArcList *al,
				 gfsmStateId  src,
				 gfsmStateId  dst,
				 gfsmLabelVal lo,
				 gfsmLabelVal hi,
				 gfsmWeight   wt,
				 gfsmArcSortData *sdata)
{
  gfsmArc *a = gfsm_arc_new_full(src,dst,lo,hi,wt);

  if (!sdata || sdata->mode == gfsmASMNone) return gfsm_arclist_prepend(al,a);
  else {
    gfsmArcList *al_first=al;
    gfsmArcList *al_prev=NULL;
  
    for (; al != NULL; al_prev=al, al=al->next) {
      if (gfsm_arc_compare_inline(a, (gfsmArc*)(al->data), sdata) >= 0) break;
    }
    if (al_prev==NULL) al_first      = gfsm_arclist_prepend(al_first, a);
    else               al_prev->next = gfsm_arclist_prepend(al, a);
    return al_first;
  }
}

/*--------------------------------------------------------------
 * arclist_insert_link()
 */
static inline
gfsmArcList *gfsm_arclist_insert_link(gfsmArcList *al,
				      gfsmArcList *link,
				      gfsmArcSortData *sdata)
{
  gfsmArcList *al_first=al;
  gfsmArcList *al_prev=NULL;
  gfsmArc     *a = gfsm_arclist_arc(link); //(gfsmArc*)(link->data);

  if (!sdata || sdata->mode == gfsmASMNone) return g_slist_concat(link,al);

  for (; al != NULL; al_prev=al, al=al->next) {
    if (gfsm_arc_compare_inline(a, (gfsmArc*)(al->data), sdata) <= 0) break;
  }

  if (al_prev == NULL) return g_slist_concat(link,al);

  al_prev->next = g_slist_concat(link, al);
  return al_first;
}

/*--------------------------------------------------------------
 * arclist_sort_full()
 */
static inline
gfsmArcList *gfsm_arclist_sort_full(gfsmArcList *al, GCompareDataFunc cmpfunc, gpointer data)
{
  return g_slist_sort_with_data(al, cmpfunc, data);
}

/*--------------------------------------------------------------
 * arclist_sort()
 */
static inline
gfsmArcList *gfsm_arclist_sort(gfsmArcList *al, gfsmArcSortData *sdata)
{
  return gfsm_arclist_sort_full(al, (GCompareDataFunc)gfsm_arc_compare, sdata);
}
