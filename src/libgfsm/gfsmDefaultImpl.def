/*=============================================================================*\
 * File: gfsmDefaultImpl.def
 * Author: Bryan Jurish <moocow@ling.uni-potsdam.de>
 * Description: finite state machine library: implementation: default wrappers: inline definitions
 *
 * Copyright (c) 2007 Bryan Jurish.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *=============================================================================*/


/*--------------------------------------------------------------
 * "pure-virtual" error message
 */
#undef  gfsm_die_no_impl
#define gfsm_die_no_impl(fnc,itype) \
  g_error("libgfsm ERROR: API function `" # fnc "()' is not implemented for automaton class `%s'\n", \
          gfsm_class_name(itype))

/*======================================================================
 * Methods: Constructors etc.
 */

/*--------------------------------------------------------------
 * init()
 */
static inline
void gfsm_automaton_init_default(gfsmAutomaton *fsm, guint n_states, guint n_arcs)
{
  gfsm_die_no_impl(init,fsm->itype);
}

/*--------------------------------------------------------------
 * clone()
 */
//--PURE FUNCTION


/*--------------------------------------------------------------
 * copy()
 */
//--PURE FUNCTION


/*--------------------------------------------------------------
 * clear()
 */
static inline
void gfsm_automaton_clear_default(gfsmAutomaton *fsm)
{
  gfsm_die_no_impl(clear,fsm->itype);
}

/*--------------------------------------------------------------
 * free()
 */
static inline
void gfsm_automaton_free_default(gfsmAutomaton *fsm)
{
  gfsm_die_no_impl(free,fsm->itype);
}




/*======================================================================
 * Methods: Automaton Structure
 */

/*--------------------------------------------------------------
 * reserve_states()
 */
static inline
void gfsm_automaton_reserve_states_default(gfsmAutomaton *fsm, gfsmStateId n_states)
{
  gfsm_die_no_impl(reserve_states,fsm->itype);
}

/*--------------------------------------------------------------
 * reserve_arcs()
 */
static inline
void gfsm_automaton_reserve_arcs_default(gfsmAutomaton *fsm, gfsmArcId n_arcs)
{
  gfsm_die_no_impl(reserve_arcs,fsm->itype);
}

/*--------------------------------------------------------------
 * n_states()
 */
//-- PURE FUNCTION

/*--------------------------------------------------------------
 * n_arcs_default()
 */
static inline
guint gfsm_automaton_n_arcs_default(gfsmAutomaton *fsm)
{
  return gfsm_automaton_n_arcs_full(fsm,NULL,NULL,NULL);
}

/*--------------------------------------------------------------
 * n_final_states_default()
 */
//-- PURE FUNCTION

/*--------------------------------------------------------------
 * get_root()
 */
static inline
gfsmStateId gfsm_automaton_get_root_default(gfsmAutomaton *fsm)
{
  return 0;
}

/*--------------------------------------------------------------
 * set_root()
 */
static inline
gfsmStateId gfsm_automaton_set_root_default(gfsmAutomaton *fsm, gfsmStateId qid)
{
  gfsm_die_no_impl(set_root,fsm->itype);
}

/*--------------------------------------------------------------
 * renumber_states_full()
 */
static inline
void gfsm_automaton_renumber_states_full_default(gfsmAutomaton *fsm, GArray *old2new, gfsmStateId n_new_states);
{
  gfsm_die_no_impl(renumber_states_full,fsm->itype);
}



/*======================================================================
 * API: Automaton States
 */

/*--------------------------------------------------------------
 * has_state()
 */
static inline
gboolean gfsm_automaton_has_state_default(gfsmAutomaton *fsm, gfsmStateId qid)
{
  return FALSE;
}

/*--------------------------------------------------------------
 * add_state_full()
 */
static inline
gfsmStateIdVal gfsm_automaton_add_state_full_default(gfsmAutomaton *fsm, gfsmStateIdVal qid)
{
  gfsm_die_no_impl(add_state_full,fsm->itype);
}

/*--------------------------------------------------------------
 * remove_state()
 */
static inline
void gfsm_automaton_remove_state_default(gfsmAutomaton *fsm, gfsmStateId qid)
{
  gfsm_die_no_impl(remove_state,fsm->itype);
}


/*--------------------------------------------------------------
 * lookup_final
 */
static inline
gboolean gfsm_automaton_lookup_final_default(gfsmAutomaton *fsm, gfsmStateId id, gfsmWeight *wp)
{
  *wp = fsm->sr->zero;
  return FALSE;
}

/*--------------------------------------------------------------
 * set_final_state_full
 */
static inline
void gfsm_automaton_set_final_state_full_default(gfsmAutomaton *fsm,
						 gfsmStateIdVal qid,
						 gboolean       is_final,
						 gfsmWeight     final_weight)
{
  gfsm_die_no_impl(set_final_state_full,fsm->itype);
}


/*--------------------------------------------------------------
 * out_degree()
 */
//-- PURE FUNCTION


/*======================================================================
 * Methods: Accessors: Automaton Arcs
 */

/*--------------------------------------------------------------
 * add_arc()
 */
static inline
void gfsm_automaton_add_arc_default(gfsmAutomaton *fsm,
				    gfsmStateId q1,
				    gfsmStateId q2,
				    gfsmLabelId lo,
				    gfsmLabelId hi,
				    gfsmWeight  w)
{
  gfsm_die_no_impl(add_arc,fsm->itype);
}

/*--------------------------------------------------------------
 * arcsort_full()
 */
static inline
void gfsm_automaton_arcsort_full_default(gfsmAutomaton *fsm, GCompareDataFunc cmpfunc, gpointer data)
{
  gfsm_die_no_impl(arcsort_full,fsm->itype);
}


//-- safety
#undef gfsm_die_no_impl
