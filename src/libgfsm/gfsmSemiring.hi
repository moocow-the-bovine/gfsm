
/*=============================================================================*\
 * File: gfsmSemiring.def
 * Author: Bryan Jurish <moocow.bovine@gmail.com>
 * Description: finite state machine library: semirings: inline definitions
 *
 * Copyright (c) 2004-2011 Bryan Jurish.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *=============================================================================*/

#include <gfsmMem.h>

#include <float.h>
#include <math.h>
#include <string.h>

/*======================================================================
 * Semiring: general utilities
 */

// LOG_BIG = log(1E31)
#define LOG_BIG    71.3801378828154
/*
//#define LOG_ZERO  -FLT_MAX
#define LOG_ZERO  -1E+38F
#define LOG_ONE    0
#define LOG_NONE   1
*/
GFSM_INLINE
gfsmWeight gfsm_log_add(gfsmWeight x, gfsmWeight y)
{
  if      (y-x > LOG_BIG) return y;
  else if (x-y > LOG_BIG) return x;
  /*else        return min(x,y) + log(exp(x-min(x,y)) + exp(y-min(x,y))); */
  else if (x<y) return x        + log( 1              + exp(y-x));
  else          return y        + log(exp(x-y)        + 1);
}
#undef LOG_BIG


/*======================================================================
 * Semiring: methods: constructors etc.
 */

/*--------------------------------------------------------------
 * new()
 */
GFSM_INLINE
gfsmSemiring *gfsm_semiring_new(gfsmSRType type)
{
  gfsmSemiring *sr = gfsm_slice_new(gfsmSemiring);
  gfsm_semiring_init(sr,type);
  return sr;
}

/*--------------------------------------------------------------
 * user_new()
 */
GFSM_INLINE
gfsmUserSemiring *gfsm_user_semiring_new(gfsmSRBinaryPredicate equal_func,
					 gfsmSRBinaryPredicate less_func,
					 gfsmSRBinaryOp        plus_func,
					 gfsmSRBinaryOp        times_func)
{
  gfsmUserSemiring *sr = gfsm_slice_new(gfsmUserSemiring);
  gfsm_semiring_init((gfsmSemiring*)sr,gfsmSRTUser);
  sr->equal_func = equal_func;
  sr->less_func = less_func;
  sr->plus_func = plus_func;
  sr->times_func = times_func;
  return sr;
}

/*--------------------------------------------------------------
 * copy()
 */
GFSM_INLINE
gfsmSemiring *gfsm_semiring_copy(gfsmSemiring *sr)
{
  if (sr->type==gfsmSRTUser) {
    gfsmUserSemiring *sr1 = gfsm_user_semiring_new(((gfsmUserSemiring*)sr)->equal_func,
						   ((gfsmUserSemiring*)sr)->less_func,
						   ((gfsmUserSemiring*)sr)->plus_func,
						   ((gfsmUserSemiring*)sr)->times_func);
    sr1->inv_l_func = ((gfsmUserSemiring*)sr)->inv_l_func;
    sr1->pow_func  = ((gfsmUserSemiring*)sr)->pow_func;
    sr1->star_func = ((gfsmUserSemiring*)sr)->star_func;
    return (gfsmSemiring*)sr1;
  }
  return gfsm_semiring_new(sr->type);
}

/*--------------------------------------------------------------
 * free()
 */
GFSM_INLINE
void gfsm_semiring_free(gfsmSemiring *sr)
{
  g_assert(sr!=NULL);
  if (sr->type==gfsmSRTUser) gfsm_slice_free(gfsmUserSemiring,(gfsmUserSemiring*)sr);
  else gfsm_slice_free(gfsmSemiring,sr);
}


/*======================================================================
 * Semiring: methods: general accessors
 */

/*--------------------------------------------------------------
 * type()
 */
GFSM_INLINE
gfsmSRType gfsm_sr_type(const gfsmSemiring *sr)
{ return sr ? sr->type : gfsmSRTUnknown; }

/*--------------------------------------------------------------
 * zero()
 */
GFSM_INLINE
gfsmWeight gfsm_sr_zero(gfsmSemiring *sr) { return sr ? sr->zero : 0; }

/*--------------------------------------------------------------
 * one()
 */
GFSM_INLINE
gfsmWeight gfsm_sr_one(gfsmSemiring *sr) { return sr ? sr->one : 1; }

/*--------------------------------------------------------------
 * equal()
 */
GFSM_INLINE
gboolean gfsm_sr_equal(gfsmSemiring *sr, gfsmWeight x, gfsmWeight y)
{
  return (sr && sr->type==gfsmSRTUser && ((gfsmUserSemiring*)sr)->equal_func
	  ? ((*((gfsmUserSemiring*)sr)->equal_func)(sr,x,y)) \
	  : (x==y));
}

/*--------------------------------------------------------------
 * less()
 */
GFSM_INLINE
gboolean gfsm_sr_less(gfsmSemiring *sr, gfsmWeight x, gfsmWeight y)
{
  switch (gfsm_sr_type(sr)) {
  case gfsmSRTLog:
  case gfsmSRTTropical:
    return (x < y);

  case gfsmSRTTrivial: 
    return 0;

  case gfsmSRTUser:
    if (((gfsmUserSemiring*)sr)->less_func)
      return (*((gfsmUserSemiring*)sr)->less_func)(sr,x,y);

  case gfsmSRTBoolean:
  case gfsmSRTReal:
  case gfsmSRTPLog:
  case gfsmSRTArctic:
  case gfsmSRTFuzzy:
  case gfsmSRTProb:
  default:
    return (x > y);
  }
  return FALSE; //-- should never happen
}

/*--------------------------------------------------------------
 * plus()
 */
GFSM_INLINE
gfsmWeight gfsm_sr_plus(gfsmSemiring *sr, gfsmWeight x, gfsmWeight y)
{
  switch (gfsm_sr_type(sr)) {
  case gfsmSRTBoolean:  return x || y;
  //case gfsmSRTLog:      return -log(exp(-x) + exp(-y));
  case gfsmSRTLog:      return -gfsm_log_add(-x,-y);
  case gfsmSRTPLog:     return  gfsm_log_add( x, y);
  case gfsmSRTTropical: return (x < y ? x : y);
  case gfsmSRTArctic:
  case gfsmSRTFuzzy:    return (x > y ? x : y);
  case gfsmSRTTrivial:  return 0;

  case gfsmSRTUser:
    if (((gfsmUserSemiring*)sr)->plus_func)
      return (*((gfsmUserSemiring*)sr)->plus_func)(sr,x,y);

  case gfsmSRTReal:
  case gfsmSRTProb:
  default:             return x + y;
  }
  return sr->zero; //-- should never happen
}

/*--------------------------------------------------------------
 * times()
 */
GFSM_INLINE
gfsmWeight gfsm_sr_times(gfsmSemiring *sr, gfsmWeight x, gfsmWeight y)
{
  switch (gfsm_sr_type(sr)) {
  case gfsmSRTBoolean:  return x && y;
  case gfsmSRTLog:      
  case gfsmSRTPLog:
  case gfsmSRTTropical: 
  case gfsmSRTArctic:   return x + y;
  case gfsmSRTFuzzy:    return (x < y ? x : y);
  case gfsmSRTTrivial:  return 0;

  case gfsmSRTUser:
    if (((gfsmUserSemiring*)sr)->times_func)
      return (*((gfsmUserSemiring*)sr)->times_func)(sr,x,y);

  case gfsmSRTReal:
  case gfsmSRTProb:
  default:             return x * y;
  }
  return sr->zero; //-- should never happen
}

/*--------------------------------------------------------------
 * linv()
 */
GFSM_INLINE
gfsmWeight gfsm_sr_inv_l(gfsmSemiring *sr, gfsmWeight x)
{
  switch (gfsm_sr_type(sr)) {
  case gfsmSRTBoolean: 
  case gfsmSRTFuzzy: return 1;

  case gfsmSRTLog:      
  case gfsmSRTPLog:
  case gfsmSRTTropical: 
  case gfsmSRTArctic:
    return -x;

  case gfsmSRTTrivial:
    return 0;

  case gfsmSRTReal:
  case gfsmSRTProb:
    return pow(x,-1.0);

  case gfsmSRTUser:
    if (((gfsmUserSemiring*)sr)->inv_l_func)
      return (*((gfsmUserSemiring*)sr)->inv_l_func)(sr,x);

  default:
    break; //g_printerr("gfsm_sr_inv_l(%g): not defined\n", x); exit(1);
  }
  return sr->zero; //-- should never happen
}

/*--------------------------------------------------------------
 * pow()
 */
GFSM_INLINE
gfsmWeight gfsm_sr_pow(gfsmSemiring *sr, gfsmWeight x, gfsmWeight n)
{
  switch (gfsm_sr_type(sr)) {
  case gfsmSRTBoolean:
  case gfsmSRTFuzzy:
    return x;

  case gfsmSRTLog:      
  case gfsmSRTPLog:
  case gfsmSRTTropical: 
  case gfsmSRTArctic:
    return x * n;

  case gfsmSRTTrivial:
    return 0;

  case gfsmSRTReal:
  case gfsmSRTProb:
    return pow(x,n);

  case gfsmSRTUser:
    if (((gfsmUserSemiring*)sr)->pow_func)
      return (*((gfsmUserSemiring*)sr)->pow_func)(sr,x,n);

  default:
    return gfsm_sr_pow_n(sr,x,n);
  }
  return sr->zero; //-- should never happen
}

/*--------------------------------------------------------------
 * star()
 */
GFSM_INLINE
gfsmWeight gfsm_sr_star(gfsmSemiring *sr, gfsmWeight x)
{
  switch (gfsm_sr_type(sr)) {
  case gfsmSRTBoolean:
  case gfsmSRTTrivial:
  case gfsmSRTFuzzy:
    return x;

  case gfsmSRTTropical: 
    if (x >= 0.0) return 0;
    return -FLT_MAX;

  case gfsmSRTArctic:
    if (x <= 0.0) return 0;
    return FLT_MAX;

  case gfsmSRTReal:
  case gfsmSRTProb:
    if (0.0 <= x && x < 1.0) return 1.0/(1.0-x);
    else if (x >= 1.0) return FLT_MAX;

  case gfsmSRTLog:
    if (x > 0.0) return log(1 - exp(-x));
    return -FLT_MAX;

  case gfsmSRTPLog:
    if (x < 0.0) return log(1 - exp(x));
    return FLT_MAX;

  case gfsmSRTUser:
    if (((gfsmUserSemiring*)sr)->star_func)
      return (*((gfsmUserSemiring*)sr)->star_func)(sr,x);

  default:
    return gfsm_sr_star_n(sr, x, GFSM_SR_STAR_N_DEFAULT);
  }
  return sr->zero; //-- should never happen
}

/*--------------------------------------------------------------
 * div()
 */
/*gboolean gfsm_sr_div(gfsmSemiring *sr, gfsmWeight x, gfsmWeight y)
  { return (sr->div_func ? ((*sr->div_func)(sr,x,y)) : (x/y)); }
*/
//@}


/*======================================================================
 * Semiring: string utilities
 */
