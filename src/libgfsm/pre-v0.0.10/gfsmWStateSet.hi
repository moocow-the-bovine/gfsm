
/*=============================================================================*\
 * File: gfsmWStateSet.hi
 * Author: Bryan Jurish <moocow.bovine@gmail.com>
 * Description: finite state machine library: state sets: inlined definitions
 *
 * Copyright (c) 2004-2007 Bryan Jurish.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *=============================================================================*/

/*======================================================================
 * Methods: gfsmWStateSet
 */

//--------------------------------------------------------------
// new()
GFSM_INLINE
gfsmWStateSet *gfsm_wqset_new(void)
{
  return gfsm_weightmap_new(gfsm_uint_compare);
}

//--------------------------------------------------------------
// new_singleton()
GFSM_INLINE
gfsmWStateSet *gfsm_wqset_new_singleton(gfsmStateId id, gfsmWeight w)
{
  gfsmWStateSet *wqset = gfsm_wqset_new();
  gfsm_weightmap_insert(wqset, GUINT_TO_POINTER(id), w);
  return wqset;
}

//--------------------------------------------------------------
// clear()
GFSM_INLINE
void gfsm_wqset_clear(gfsmWStateSet *wqset)
{
  gfsm_weightmap_clear(wqset);
}

//--------------------------------------------------------------
// free()
GFSM_INLINE
void gfsm_wqset_free(gfsmWStateSet *wqset)
{
  gfsm_weightmap_free(wqset);
}

//--------------------------------------------------------------
GFSM_INLINE
void gfsm_wqset_insert(gfsmWStateSet *wqset, gfsmSemiring *sr, gfsmStateId q, gfsmWeight w)
{
  gfsmWeight w0;
  if (sr!=NULL && gfsm_weightmap_lookup(wqset, GUINT_TO_POINTER(q), &w0)) {
    //-- already present
    w = gfsm_sr_plus(sr, w0, w);
  }
  gfsm_weightmap_insert(wqset, GUINT_TO_POINTER(q), w);
  return w;
}

/*======================================================================
 * Methods: Accessors
 */


//--------------------------------------------------------------
// min()
GFSM_INLINE
gfsmStateId gfsm_wqset_min(gfsmWStateSet *sset)
{
  return sset->len > 0 ? (*((gfsmStateId*)sset->data)) : gfsmNoState;
}
//--------------------------------------------------------------
// size()
GFSM_INLINE
guint gfsm_wqset_size(gfsmWStateSet *sset)
{
  return sset->len;
}

//--------------------------------------------------------------
// find()
//--EXTERN

//--------------------------------------------------------------
// contains()
GFSM_INLINE
gboolean gfsm_wqset_contains(gfsmWStateSet *sset, gfsmStateId id)
{
  gfsmWStateSetIter sseti = gfsm_wqset_find(sset,id);
  return sseti != NULL && *sseti != gfsmNoState;
}

//--------------------------------------------------------------
// insert()
//--EXTERN

//--------------------------------------------------------------
// union()
//--EXTERN

//--------------------------------------------------------------
// remove()
//--EXTERN

//--------------------------------------------------------------
// equal()
//--EXTERN

/*======================================================================
 * Methods: Utilities
 */

//--------------------------------------------------------------
// hash()
//--EXTERN


//--------------------------------------------------------------
// foreach()
//--EXTERN

/*======================================================================
 * Methods: Automaton access
 */

//--------------------------------------------------------------
// populate()
//--EXTERN

//--------------------------------------------------------------
// has_final_state()
//--EXTERN

//--------------------------------------------------------------
// lookup_final_weight()
//--EXTERN
